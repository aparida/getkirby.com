Title: Kirby 2 – Sneak Peek

----

Date: 19.03.2013

----

Tags: releases

----

Text: 

UPDATE: Kirby 2 will be a (link: blog/free-upgrade text: free upgrade)

In early December I started working on a brand new "minor major" release 
for Kirby – Kirby 1.5

Then (link: blog/best-christmas-gift-ever text: the baby came) and my life changed completely. It took me quite some time to get back to a normal schedule and suddenly I found my self in a rush of creativity and new ideas. Too many ideas for Kirby 1.5. So a couple weeks ago I decided to jump to Kirby 2.0 directly without any inbetween releases.

This means that I'm still not announcing Kirby 2.0 today. Kind of frustrating, right? 
Is it? I felt in a hurry with the new version for a long time until I realized that I'm not. 

Kirby is working great in its current state. There are things with the panel that are not perfect yet, but there's no real urge to come up with something new. At least the urge is not strong enough to force me to some half-assed release. Instead I decided to take the time it needs to make it perfect and I really hope you understand. 

**I have been way too quiet in the last weeks and I definitely owe you an appetizer:**

## The core

### It's so lazy

I've rewritten the core from scratch with a focus on lazy loading. Everything is loaded, parsed or calculated only on demand. This will give a massive speed boost in lots of situations where the old version would still pre-fetch things. 

### Fully documented

I've entirely skipped code documentation for the first version. I compensated with more online docs, but the new version has inline documentation for every class, every method and every config option. 

### Smarter site object

The site object in Kirby 2 has the same features as every other page. This means that you can now store global images and files directly in the content folder and access them from the $site variable…

```php

// access global images in the content folder
foreach($site->images() as $image) {
  …  
}

```

### Loadable from everywhere

The new infrastructure for Kirby 2 allows it to run Kirby in your own script.
This means that you get full access to all the data in your content folder as simple as this: 

#### myscript.php
```php

// load the bootstrapper
require('kirby/bootstrap.php');

// initialize the site for the first time
$site = site();

// load something from the API
$page = $site->pages()->find('my/awesome/page');

// do something with the page object
echo $page->title();

```

### New languages API

For multi-language sites, it's now way easier to work with available languages…

```

<ul class="lang-selector">
  <?php foreach($site->languages() as $lang): ?>
  <li<?php ecco($lang->isActive(), ' class="active"') ?>>
    <a href="<?php echo $lang->url() ?>"><?php echo $lang->code() ?></a>
  </li>
  <?php endforeach ?>
</ul>

```

### New page filter methods

With Kirby 2 comes a bunch of helpful new filter methods for page collections: 

```php

// get all pages with a date in the past or right now
$articles = $pages->children()->filterBy('date', '<=', time());

// get all pages with more likes than 10
$articles = $page->children()->filterBy('likes', '>', 10);

```

### New plugin API

Kirby 2 will also have a brand new plugin API, which will give more power to new plugins without breaking old ones. 

### New Kirbytext extensions

Kirbytext is no longer extendable by extending the kirbytext class, but by adding a simple php file to `site/tags` for each new tag. This makes it much easier to add and share Kirbytext tags with other users and projects and you need less PHP knowledge to build your own tags. 

### Built-in Exif data parsing

Kirby 2 has a handy exif data parser for all image files…

```php

// get an image's exif data
$exif = $page->images()->first()->exif();

// camera model
echo $exif->camera()->model();

// location (latitude)
echo $exif->location()->lat();

// location (longitude)
echo $exif->location()->lng();

```

## The panel

The panel is still a secret and yet the most unfinished part of Kirby 2. I have something in mind for the panel, which will make it much more than it is right now, without bloating it. I will let you know as soon as I'm able to show you some more. 

## The toolkit

In the line of creating a new core and panel, the toolkit got a major overhaul as well. 

### A new database class

There's a brand new database class. With support for MySQL and new support for SQLite together with a fully fluent interface, it's going to be the perfect match for Kirby's file handling powers. 

```php

// get a single user
$user = db::table('users')->where('username', '=', 'peter')->first();

// get multiple subscribers from a fictional newsletter list
$subscribers = db::table('subscribers')->order('email desc')->limit(100);

// auto-pagination
$subscribers = db::table('subscribers')->order('email desc')->page(1, 100);

// all rows have a fluent interface as well
foreach($subscribers as $subscriber) {
  echo $subscriber->firstName() . ' ' . $subscriber->lastName();
}

// inserting
db::table('subscribers')->insert(array(
  'firstName' => 'Peter',
  'lastName'  => 'Pan',
  'email'     => 'peter@pan.com'
));

// updating
db::table('subscribers')->where('last_name', '=', 'Pan')->update(array(
  'firstName' => 'Peter',
  'lastName'  => 'Pan',
  'email'     => 'peter@pan.com'
));

// deleting
db::table('subscribers')->where('email', '=', 'peter@pan.com')->delete();

```

The db class also has all the shortcuts from the old version. 

### New validators

There's a ton of new content validators and a handy new validation method, which is capable of validating an entire set of values in a single go. 

```php

// validate the request data
$result = v::all(get(), array(
  'username' => 'required|alphanum|min:5|max:140',
  'email'    => 'required|email', 
));

dump($result);

```

### html, form and embed

There's a set of new html generators, which makes it super easy to build all kinds of html elements. Those are perfect for your Kirby templates, to keep things nice and clean. 

```php

// create a link
echo html::a('http://google.com', 'Google');

// create an image
echo html::img('myimage.jpg');

// create an image with additional attributes
echo html::img('myimage.jpg', array(
  'width'  => 100,
  'height' => 200
));

// embed a favicon
echo html::favicon('favicon.ico');

// load the html5 shiv
echo html::shiv();

// build a search form
echo form::start('/search', 'POST');
echo form::search('q', '', array('placeholder' => 'Search…'));
echo form::submit('submit', 'Search');
echo form::end();

// embed a youtube video
echo embed::youtube('http://www.youtube.com/watch?v=rpMn6gP69eM');

// embed a gist from github
echo embed::gist('https://gist.github.com/bastianallgeier/4554931');


```

## Tests, tests, test 

Everything I build for Kirby 2 is fully tested with PHPUnit and integrated with (link: http://travis-ci.org text: Travis CI). This will make it a lot easier to avoid bugs in future releases and will also help to accept or decline pull requests faster. 

## More…

It's a sneak peek, so that is just the tip of the iceberg :)

There are dozens of additional new methods, helpers and improvements for the toolkit and the core. A lot of code, which has been created for Kirby 1 made it into the toolkit, which is released under the MIT open-source license, so you can use it for free in your own projects. I think this is going to be really cool.

## Code preview

If you want to check out the current state of all three parts of Kirby 2, you can take a look at the source on Github: <http://github.com/kirbycms>  

**Be aware that this is pre-alpha. Things break and won't even run at all. I also still change a lot of stuff on a daily basis. So don't be disappointed if you try to run the new version!** 

If you want to contribute, please let me know: <bastian@getkirby.com>

## Excited? 

I hope you are as excited about this new version as I am. I can't give you an exact ETA when it will be ready since I'm still working on client projects. Any feedback or contribution is highly welcome!

Cheers, Bastian








